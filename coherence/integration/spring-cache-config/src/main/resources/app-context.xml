<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:coherence="http://www.griddynamics.com/schema/coherence-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                     http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
                     http://www.griddynamics.com/schema/coherence-spring
                     http://www.griddynamics.com/schema/coherence-spring/coherence.xsd">

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:app.properties</value>
        </property>
    </bean>


    <!--Creating ValueExtractor for indexies-->
    <bean id="extractor_1" class="com.tangosol.util.extractor.ReflectionExtractor">
        <constructor-arg index="0" value="getCity"/>
    </bean>

    <!--Connecting ValueExtractor to NamedCache.
    We need to invoke addIndex method on NamedCache, but it is not setter and has arguments.
    This is why we should use MethodInvokingFactoryBean
    This is a little bit bulky, but it is only classic spring style-->
    <bean id="extractorSetter" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref="cache_1"/>
        <property name="targetMethod" value="addIndex"/>
        <property name="arguments">
            <list>
                <ref local="extractor_1"/>
                <value>true</value>
                <null/>
            </list>
        </property>
    </bean>

    <!--Connection ContinuousQuery to NamedCache-->
    <bean id="continuousQuery_1" class="com.tangosol.net.cache.ContinuousQueryCache">
        <constructor-arg index="0" ref="cache_1"/>
        <constructor-arg>
            <bean class="com.tangosol.util.filter.EqualsFilter">
                <constructor-arg index="0" value="getCity"/>
                <constructor-arg index="1" value="Saratov"/>
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="com.griddynamics.coherence.AddressMapListener"/>
        </constructor-arg>
    </bean>

    <!--Creating our NamedCache-->
    <bean id="cache_1" factory-bean="test" factory-method="ensureCache">
        <constructor-arg type="java.lang.String" value="dist-test"/>
        <constructor-arg type="java.lang.ClassLoader">
            <null/>
        </constructor-arg>
    </bean>

    <bean id="serializer_1" class="com.tangosol.io.pof.ConfigurablePofContext" scope="prototype">
        <constructor-arg index="0" value="contacts-pof-config.xml"/>
    </bean>

    <!--Coherence configuration-->
    <coherence:cache-config id="test">
        <coherence:caching-scheme-mapping>
            <coherence:cache-mapping>
                <coherence:cache-name>*</coherence:cache-name>
                <coherence:scheme-name>ExamplesPartitionedPofScheme</coherence:scheme-name>
            </coherence:cache-mapping>
        </coherence:caching-scheme-mapping>
        <coherence:caching-schemes>
            <coherence:distributed-scheme>
                <coherence:scheme-name>ExamplesPartitionedPofScheme</coherence:scheme-name>
                <coherence:service-name>PartitionedPofCache</coherence:service-name>
                <coherence:serializer>
                    <!--<coherence:class-name>spring-bean:serializer_1</coherence:class-name>-->
                    <coherence:class-name>com.tangosol.io.pof.ConfigurablePofContext</coherence:class-name>
                    <coherence:init-params>
                        <coherence:init-param>
                            <coherence:param-type>String</coherence:param-type>
                            <coherence:param-value>contacts-pof-config.xml</coherence:param-value>
                        </coherence:init-param>
                    </coherence:init-params>
                </coherence:serializer>
                <coherence:backing-map-scheme>
                    <coherence:local-scheme>

                        <!--This is example of configuring through property placeholder-->

                        <coherence:high-units>${simple.scheme.name.config}</coherence:high-units>
                        <coherence:unit-calculator>binary</coherence:unit-calculator>
                    </coherence:local-scheme>
                </coherence:backing-map-scheme>
                <coherence:autostart>true</coherence:autostart>
            </coherence:distributed-scheme>
        </coherence:caching-schemes>
    </coherence:cache-config>
</beans>
