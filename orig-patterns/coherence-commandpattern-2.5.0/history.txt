----------------------------------------------------------------------------------------------------
Command Pattern Project History
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
Version 2.5.0: 18th October 2009: Brian Oliver
----------------------------------------------------------------------------------------------------

*) 	Migrated to use coherence-common-1.5.0

*)	Resolved INC-164: Added the ability to support save, load and remove "checkpoints" during
	the execution of a Command via the ExecutionEnvironment interface.  This may help simplify 
	Command execution recovery.
	
*)  Resolved INC-171: Refactored CommandExecutorManager.isContextOwned.  It now resides on
	each CommandExecutor to avoid same-service calls and unusual deadlock warnings 
	(though deadlocks aren't possible as cache services aren't being called!)
	
*)	Resolved INC-211: Updated to depend on Coherence 3.5.2 (and Coherence 3.4)

*) 	Resolved INC-214: Moved Examples into the new Examples project

----------------------------------------------------------------------------------------------------
Version 2.4.0: 22nd July 2009: Brian Oliver
----------------------------------------------------------------------------------------------------

*)	Migrated to use coherence-common-1.4.0

*)	Resolved INC-2: Refactored internal implementation to avoid using the InvocationService and 
	thus (more easily) support *Extend clients 

*)	Resolved INC-4: Added the CommandBatch command to support submitting a list of Commands as a 
	single Command (this supporting higher throughput of Command submission)

*)	Resolved INC-76: Refactored generation of sequence numbers to use the newly provided 
	coherence-common-1.4.0 implementations
	
*)	Resolved INC-105: Renamed caches to use coherence.* namespaces 
	(also helps support *Extend clients)

----------------------------------------------------------------------------------------------------
Version 2.3.0: 30th March 2009: Brian Oliver and Noah Arliss
----------------------------------------------------------------------------------------------------

*)	Migrated to use Apache Ivy for dependency management and publishing artifacts 
	(introduced ivy.xml, removed dependencies.info).  
	
	Apart from now using standardized repositories and the potential to integrate
	with Maven, all Coherence Incubator projects should now (almost) have the same build.xml files!

*)	Upgraded to use coherence-common-1.3.0
	(to use the optimized and lazy deserialization version of the AbstractMultiplexingBackingMapListener)

*)	Added generic exception handler to the CommandExecutor.execute() method so that the underlying 
	ExecutorServices don't just ignore any internal exceptions (and not log them).  
	This can help debug serialization problems caused by defective Commands. (Thanks to Andy Piper)

*)	Add the ability to cancel the execution of a Command after it has been submitted, but before it
	has been executed with the new method;	
	
	CommandSubmitter.cancelCommand(Identifier commandIdentifier);

	The following internal and API changes were made to support this;
	
	1. A CommandSubmitter will now return the Identifier that was allocated to the submitted Command
	   when calling one of the submitCommand(...) methods.
	
	2. The internal CommandExecutionRequests object now contains a "isCanceled" state 
	   indicating that the request should not be executed (if it hasn't been already or is the 
	   process of executing)

	This implementation is essentially to support the canceling of submitted Functors.

*)	Added support for PriorityCommands through the addition of the PriorityCommand marker interface.
	This includes the ability to convert regular commands into priority commands with the
	PriorityCommandAdapter.
	
*)	Fixed the ContextWrapper POF writeExternal method to correctly write out longs as
	longs instead of Objects (Thanks to Simon Bisson)
	
*)	Added the ability to extract values from a Context using 
	ContextsManager.extractValueFromContext method
	
*)	Resolved potential race-condition when concurrently submitting Commands and a Context is in the 
	process of recovering due to partition recovery or balancing.

----------------------------------------------------------------------------------------------------
Version 2.2.0: 10th November 2008: Brian Oliver and Simon Bisson 
----------------------------------------------------------------------------------------------------

*)	Now requires coherence-common-1.2.0

*)	Modified the SequenceGenerator to produce batches of sequence numbers.

*)	Fixed SequenceGenerator.toString as it was mutating the nextValue state. 
	(The toString method should not mutate an object)

*)	CommandExecutionRequest.Keys are now implement Identifier.  This allows us to return them (at some time)
	to the submitter of a Command without exposing the underlying type.

*)	Refactored internal implementation of the ContextWrapper and CreateContextProcessor to 
	simplify use of the AbstractMultiplexingBackingMapListener (and remove the use of MemberAware)

*)	Resolved <warnings> being issued by Coherence due to the CommandExecutorService threads being
	on the same ThreadGroup as the DistributedCacheWithBackingMapListener.  

*)	Made the ContextWrapper support versioning.  This means that when a ContextWrapper (Context)
	migrates between cluster Members, the version number is incremented.  This ensures we avoid
	the possibility two threads (on different Members) attempting to update a Context at the same
	time.  ie: This allows us to fail-fast when we detect this possibly happening.

*)	Complete re-write of the internals (command submission, execution and management) to
	remove all possible re-entrant calls on all Coherence Services.  Now capable of running entirely
	on single threads.  No longer uses EntryProcessors to submit Commands, but instead uses
	a multi-threaded InvocationService.

*)	Enabled Commands to be submitted to Contexts that have yet to be registered.  Added the
	CommandSubmitter.submitCommand(Identifier contextIdentifier, 
								   Command command, 
								   boolean allowSubmissionWhenContextDoesNotExist) method.

	This allows the Messaging and Push Replication layers to register subscriptions for topics
	that have yet to be created - simplifying configuration of subscribers and publishers
	respectively.

*)	Improved JMX to report local statistics v's global statistics.  You can now see total commands
	submitted instead of just those locally.

*)	Added deploy target to the build.xml (to simplify deployment to a repository)
	(thanks Ashish)
	
----------------------------------------------------------------------------------------------------
Version 2.1.1: 14th October 2008: Brian Oliver
----------------------------------------------------------------------------------------------------

*) 	Added support for the new <introduce-cache-config file="..."/> element when using the 
	AdvancedConfigurableCacheFactory from coherence-common-1.1.1

----------------------------------------------------------------------------------------------------
Version 2.1.0: 6th October 2008: Brian Oliver
----------------------------------------------------------------------------------------------------

*)	Added the ability to return the last updated version of a Context given
	an Identifier. (using the new ContextsManager.getContext(Identifier) method).

*)	CommandSubmitter.submitCommand now throws an IllegalArgumentException if a Context with
	the specified Identifier does not exist

*)	Optimized the representation of pending Commands (CommandExecutionRequests) so that we no 
	longer internally require a queue data structure internally to keep either a copy of the 
	CommandExecutionRequests or their keys, but still guarantees order-of-execution.
	
	This change means we can now theoretically have an infinite number (size of a long) Commands
	pending execution without increasing the size of the JVM hosting the Context and 
	CommandExecutor.  It also means that a). the heap size of said JVMs may be much smaller than 
	previously used, and b). we're encouraging short-lived/young-generation usage instead of
	old-generation (and more highly contented GCs).

	To permit this change we've upgraded to coherence-common-1.1.0.  We've introduced the concept
	of TicketBooks and TicketAggregators.
	
*)	Modified the return type of CommandExecutorMBean.getTotalCommandsPendingExecution to be 
	long (from an int).

*)	Added support for Coherence 3.4 and Portable Object Format.  Remains backwards compatible with
	Coherence 3.3.x

	coherence-commandpattern-pof-config.xml contains the required POF type definitions (for Java)

	coherence-commandpattern-pof-cache-config.xml contains the necessary cache configurations to
	support POF.

*)	Improved generated javadoc so that it now directly links to the standard 
	Oracle Coherence 3.4 online documentation.

*)	Renamed commandpattern-cacheconfig.xml to match the Coherence standard (like POF). It's now
	called coherence-commandpattern-cache-config.xml
	
----------------------------------------------------------------------------------------------------
Version 2.0.1: 22nd August 2008: Nicholas Gregory and Brian Oliver
----------------------------------------------------------------------------------------------------

*)	Fixed registration of CommandPattern JMX CommandExecutor MBeans so that;

	a). duplicate registrations across a cluster no longer occur.
	
	b). mbeans are registered using the name of the contexts instead of the node id.

	Implementation provided by Nicholas Gregory.
	
----------------------------------------------------------------------------------------------------
Version 2.0.0: 14th August 2008: Brian Oliver
----------------------------------------------------------------------------------------------------

*)	This release represents a significant amount of work on the internal implementation
	and design of the Coherence Command Pattern.  In essence the motivation for this
	release was to;
	
	a). resolve capacity issues found in the push-replication pattern
		implementation
		
	b). allow for the implementation of other patterns based on this implementation
		(like the Functor and Staged Object Processing patterns).
		
	c). resolve potential class and interface clashes with core Coherence implementation(s)
	
	d). improve consistency of naming and prepare for wider-public release (ie: simplify documentation)
	
	Below are more specific comments regarding the major changes 

*)	Introduced the CommandSubmitter and ContextsManager interfaces to separate
	the submission of Commands from the management of Contexts.  
	
*)	Provided default implementations for both the CommandSubmitter and
	ContextsManager interfaces based on the old (and removed) Contexts class.  
	
	This permits non-static-based Command submission and Context management 
	(which will help with unit testing, mocking and Spring-based applications)
			
*)	Reviewed and corrected javadoc comments, including removing and cleaning up 
	Copyright notices from the Java Class Javadocs (as it stuffs up the @see 
	also rendering)

*)	Added docs folder with omni-graffle UML diagrams

*)	Refactored Handles to become Identifiers to avoid a potentially nasty name 
	clash with the Coherence 3.4 C++ implementation.

*)	Moved the com.oracle.coherence.patterns.identifiers package into the new
	coherence-common project as com.oracle.coherence.common.identifiers
	
*)	Moved the com.oracle.coherence.patterns.backingmaplistener package into the new
	coherence-commons project as com.oracle.coherence.common.backingmaplisteners
	
*)	Moved the Ticket class into the coherence-common project as 
	com.oracle.coherence.common.identifiers.Ticket
	
*)	Fixed problems with lastCommandExecutionTime, getContextIdentifier and a bunch of
	other JMX statistics (thanks to Nick Gregory for spotting these)

*)	Modified the CommandExecutor to only queue the Keys of CommandExecutionRequests.  This
	reduces the number of strong references to CommandExecutionRequests and thus lets the garbage
	collector free some memory when the CommandExecutor is underload.
	
*)	Introduced a maximumBatchSize (of 100) for a CommandExecutor batch.  This allows us to have predictable
	maximum batch sizes when executing Commands, thus also freeing up memory when a CommandExecutor
	is underload.  In the past batch sizes where unlimited, which consequently meant that all
	commands where held in memory until the last executed command in a batch was completed.
	
*)	Introduced ContextConfiguration interface (and default implementation) to allow a programmatic
	mechanism to configure individual Context runtime semantics
	
*)	Introduced the concept of ManagementStrategy for Contexts that allows us to specify
	when creating a Context how Commands are managed and storage.  Two strategies are defined;
	COLOCATED (the default) which means Commands for associated Contexts are co-located 
	(using data affinity) and DISTRIBUTED which means Commands for Contexts are distributed 
	across the cluster (in a Distributed Cache).
	
	The COLOCATED strategy is designed for high-performance and short bursts of Command 
	submissions.  This strategy also attempts to minimize network traffic where possible, but
	the cost is potentially high single JVM memory utilization.
	
	The DISTRIBUTED strategy is designed to cope with large volumes of Command submissions
	(ie: pending command submission capacity).  This strategy foregoes network performance (it
	will use more network and thus be slower), but provides greater capacity for unexecuted (pending)
	commands.
	
*)	Modified CommandExecutionRequest.Keys so that they don't require a UUID.  They instead use the
	ContextIdentifier and Ticket for a key.

----------------------------------------------------------------------------------------------------
Version 1.0.1: 25th June 2008: Brian Oliver 
----------------------------------------------------------------------------------------------------

*)	Added history.txt

*)	Replaced trace System.out's in core implementation with Coherence Logging calls

*)	Provided the NullBackingMapListener as the default backing-map-listener-class-name parameter.  
	This allows us to re-use the distributed-scheme-with-backing-map in other places
	with minimal effort and zero performance impact (especially in the other patterns)
	
*)	Added example source tree, the build.xml and this history.txt to the source distribution.
	(thanks to Nick Gregory for spotting this)

----------------------------------------------------------------------------------------------------
Version 1.0.0: 18th June 2008: Brian Oliver
----------------------------------------------------------------------------------------------------

*) 	Initial commit to SVN repository
